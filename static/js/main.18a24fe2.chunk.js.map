{"version":3,"sources":["components/main/Nav.module.scss","components/main/UsersList.module.scss","components/ui/Select.module.scss","components/ui/octocat-spinner-128.gif","enums/shared.ts","redux/helpers/typedAction.ts","redux/actions/entities.ts","components/ui/Select.tsx","components/main/Nav.tsx","components/ui/Card.tsx","components/main/UsersList.tsx","App.tsx","components/ui/LoadingView.tsx","redux/reducers/entities.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx","components/ui/Card.module.scss"],"names":["module","exports","Entities","Constants","typedAction","type","payload","setEntities","results","SET_ENTITIES","setEntitiesResolved","isResolved","SET_ENTITIES_RESOLVED","selectEntityType","entityType","dispatch","getState","selectedEntityType","SET_ENTITY_TYPE","changeSearchQueue","searchQueue","SET_SEARCH_QUEUE","setSearchQueue","loadEntities","searchQuery","a","REQUEST_ENTITIES","fetch","User","then","res","json","items","catch","err","alert","message","resetEntitiesResolved","resetEntities","Select","defaultValue","options","onChange","className","useState","optionValue","setOptionValue","value","e","selectedIndex","currentTarget","selectedOption","styles","select","map","option","id","key","label","selectToggle","searchOptions","Repository","Nav","connect","state","entities","isLoading","bindActionCreators","setSearchQuery","isSearchTop","setIsSearchTop","loadResults","length","useEffect","debouncedOnChange","_","headerSearchWrapper","centeredSearchWrapper","search","height","viewBox","version","width","aria-hidden","d","placeholder","searchInput","event","searchString","target","persist","handleSelectChange","Card","item","isUser","cardWrapper","cardImgWrapper","src","avatar_url","owner","alt","login","full_name","cardImg","cardInfo","cardName","href","html_url","description","cardButton","stargazers_count","aria-label","role","language","tag","UsersList","selectedEntity","cardsWrapper","result","Array","fill","index","App","path","exact","component","LoadingView","spinner","initialState","entitiesReducer","action","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStorage","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveToLocalStorage","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.18a24fe2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"Nav_searchInput__1FOHd\",\"headerSearchWrapper\":\"Nav_headerSearchWrapper__QnzU0\",\"centeredSearchWrapper\":\"Nav_centeredSearchWrapper__2pdpw\",\"search\":\"Nav_search__27vTY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"UsersList_cardsWrapper__1UdFG\",\"placeholder\":\"UsersList_placeholder__aad9r\",\"loading\":\"UsersList_loading__JbFPq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__3QjXX\",\"selectToggle\":\"Select_selectToggle__WVixz\"};","module.exports = __webpack_public_path__ + \"static/media/octocat-spinner-128.77466063.gif\";","export enum Entities {\n    User = 'USER',\n    Repository = 'REPOSITORY',\n};\n\nexport enum Constants {\n    REQUEST_ENTITIES = 'REQUEST_ENTITIES',\n    SET_ENTITIES = 'SET_ENTITIES',\n    SET_ENTITIES_RESOLVED = 'SET_ENTITIES_RESOLVED',\n    SET_ENTITIES_FAILED = 'SET_ENTITIES_FAILED',\n    SET_ENTITY_TYPE = 'SET_ENTITY_TYPE',\n    SET_SEARCH_QUEUE = 'SET_SEARCH_QUEUE'\n}\n","export function typedAction<T extends string>(type: T): { type: T };\n\nexport function typedAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload: P };\n\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload };\n}\n","import { Entities } from \"../../enums/shared\"\nimport { typedAction } from \"../helpers/typedAction\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { RootState } from \"../reducers/index\";\nimport { Constants } from \"../../enums/shared\";\n\nconst setEntityType = (selectedEntityType: EntityType) => {\n    return typedAction(Constants.SET_ENTITY_TYPE, selectedEntityType);\n};\n\nconst setEntities = (results: Repository[] | User[]) => {\n    return typedAction(Constants.SET_ENTITIES, results);\n};\n\nconst requestEntities = () => {\n    return typedAction(Constants.REQUEST_ENTITIES);\n};\n\nconst setEntitiesResolved = (isResolved: boolean) => {\n    return typedAction(Constants.SET_ENTITIES_RESOLVED, isResolved);\n};\n\nconst setSearchQueue = (searchQueue: string) => {\n    return typedAction(Constants.SET_SEARCH_QUEUE, searchQueue);\n};\n\nexport const selectEntityType = (entityType: EntityType) => {\n    return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        dispatch(setEntityType(entityType));\n    }\n};\n\n// needed for persisting query to local storage\nexport const changeSearchQueue = (searchQueue: string) => {\n    return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        dispatch(setSearchQueue(searchQueue));\n    }\n};\n\nexport const loadEntities = (searchQuery: string, entityType: EntityType) => {\n    return async (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        dispatch(requestEntities());\n        return await fetch(`https://api.github.com/search/${entityType === Entities.User ? 'users' : 'repositories'}?q=${searchQuery}`)\n            .then(res => res.json())\n            .then(json => dispatch(setEntities([...json.items])))\n            .then(() => dispatch(setEntitiesResolved(true)))\n            .catch(err => alert(err.message))\n    }\n};\n\nexport const resetEntitiesResolved = () => {\n    return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        dispatch(setEntitiesResolved(false));\n    }\n};\n\nexport const resetEntities = () => {\n    return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        dispatch(setEntitiesResolved(false));\n        dispatch(setEntities([]));\n    }\n};\n\nexport type EntityActionType =\nReturnType<typeof setEntityType\n| typeof setEntities\n| typeof requestEntities\n| typeof setEntitiesResolved\n| typeof setSearchQueue\n>;\n","import React, { useState } from \"react\";\nimport styles from \"./Select.module.scss\"\n\nexport interface OptionComponentProps<T = any> {\n    className?: string;\n    options: Option<T>[];\n    onChange(value: T, option?: Option<T>): void;\n    defaultValue: T;\n}\n\nexport function Select<T extends EntityType>({ defaultValue, options, onChange, className}: OptionComponentProps<T>) {\n    const [optionValue, setOptionValue] = useState(defaultValue);\n\n    const handleOnChange = (e: React.FormEvent<HTMLSelectElement>) => {\n        const { selectedIndex } = e.currentTarget;\n        const selectedOption = options[selectedIndex];\n        setOptionValue(selectedOption.value);\n        onChange(selectedOption.value);\n    }\n\n    return (\n        <div className=\"pos-rel disp-flex\">\n            <select\n                value={optionValue}\n                onChange={handleOnChange}\n                className={`${styles.select} ${className}`}\n            >\n                {options.map((option, id) =>\n                    <option\n                        key={id}\n                        value={option.value}\n                    >\n                        {option.label}\n                    </option>\n                )}\n            </select>\n            <span className={styles.selectToggle}></span>\n        </div>\n\n    );\n}\n","\nimport React, { useState, useEffect } from \"react\";\nimport { RootState } from \"../../redux/reducers\";\nimport { selectEntityType, loadEntities, resetEntities, resetEntitiesResolved, changeSearchQueue } from \"../../redux/actions/entities\"\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { Select } from \"../ui/Select\";\nimport { Entities } from \"../../enums/shared\";\nimport styles from \"./Nav.module.scss\";\nimport * as _ from \"lodash\";\n\nconst mapStateToProps = (state: RootState) => ({\n    selectedEntityType: state.entities.type,\n    isLoading: state.entities.isLoading,\n    searchQueue: state.entities.searchQueue\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            loadEntities,\n            resetEntitiesResolved,\n            resetEntities,\n            selectEntityType,\n            changeSearchQueue\n        },\n        dispatch\n    );\n\nconst searchOptions = [\n    {\n        label: \"Users\",\n        value: Entities.User\n    },\n    {\n        label: \"Repositories\",\n        value: Entities.Repository\n    },\n];\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport const UnconnectedNav: React.FC<Props> = ({\n    loadEntities,\n    resetEntitiesResolved,\n    resetEntities,\n    selectedEntityType,\n    selectEntityType,\n    changeSearchQueue,\n    searchQueue\n}) => {\n    const [searchQuery, setSearchQuery] = useState(searchQueue);\n    const [isSearchTop, setIsSearchTop] = useState(false);\n\n    const loadResults = ({ searchQuery = searchQueue, entityType = selectedEntityType}: {searchQuery?: string, entityType?: EntityType })  => {\n        if (searchQuery.length >= 3) {\n            setIsSearchTop(true)\n            loadEntities(searchQuery, entityType);\n        }\n    };\n\n    useEffect(() => {\n        loadResults({});\n    },[]); // needed to run only once on component render\n\n    const debouncedOnChange = _.debounce((searchQuery) => loadResults({searchQuery: searchQuery}), 1000);\n\n    const onChange = (event: React.SyntheticEvent) => {\n        const\n            target = event.target as HTMLTextAreaElement,\n            searchString = target.value;\n\n        event.persist();\n\n        if (!searchString) {\n            resetEntities()\n            setIsSearchTop(false)\n        }\n        changeSearchQueue(searchString); // needed for persisting data on page reload\n        setSearchQuery(searchString);\n        if (searchString.length >= 3) {\n            debouncedOnChange(searchString);\n        }\n    };\n\n    const handleSelectChange = (entityType: Entities) => {\n        selectEntityType(entityType);\n        resetEntitiesResolved();\n        loadResults({ searchQuery: searchQuery, entityType: entityType });\n    };\n\n    return (\n        <div className={isSearchTop ? styles.headerSearchWrapper : styles.centeredSearchWrapper}>\n            <div className={styles.search}>\n                <div className=\"disp-flex flex-align--center mar-ver--20\">\n                    <svg height=\"32\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n                        <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                    <div className=\"mar-lft--10\">\n                        <h1 className=\"mar-no text-dark-gray\">Github Searcher</h1>\n                        <p className=\"text-gray mar-no\">Search users or repositories below</p>\n                    </div>\n                </div>\n                <div className=\"disp-flex\">\n                    <input\n                        type=\"search\"\n                        placeholder=\"Start typing to search...\"\n                        className={styles.searchInput}\n                        value={searchQuery}\n                        onChange={onChange}\n                    />\n                    <Select\n                        className=\"mar-lft--10\"\n                        options={searchOptions}\n                        defaultValue={selectedEntityType}\n                        onChange={(entityType) => handleSelectChange(entityType)}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport const Nav = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UnconnectedNav);\n","import React from \"react\";\nimport styles from \"./Card.module.scss\";\nimport { Entities } from \"../../enums/shared\";\n\ntype Props = {\n    item: Repository & User;\n    type: EntityType;\n};\n\nexport const Card: React.FC<Props> = ({ item, type }) => {\n    const isUser = type === Entities.User;\n\n    return (\n        <div\n            className={`${styles.cardWrapper} disp-flex flex-column flex-just--sb`}\n        >\n             <div className={`disp-flex ${isUser && 'flex-align--center'} ${styles.cardImgWrapper}`}>\n                <img\n                    src={isUser ? item.avatar_url : item.owner.avatar_url}\n                    alt={isUser ? item.login : item.full_name}\n                    className={styles.cardImg}\n                />\n                <div className={`disp-flex flex-column ${styles.cardInfo}`}>\n                    <h2 className={styles.cardName}><a className={`${!isUser && 'text-blue'}`} href={item.html_url}>{isUser ? item.login : item.full_name}</a></h2>\n                    {!isUser && <p>{item.description}</p>}\n                </div>\n            </div>\n            {isUser\n                ? <a\n                    className={styles.cardButton}\n                    href={item.html_url}\n                >\n                    <span>Go to profile</span>\n                </a>\n                : <div className=\"disp-flex flex-align--center\">\n                    {item.stargazers_count &&\n                        <span className=\"disp-flex flex-align--center\">\n                            <svg aria-label=\"star\" viewBox=\"0 0 14 16\" version=\"1.1\" width=\"14\" height=\"16\" role=\"img\">\n                                <path d=\"M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z\"></path>\n                            </svg>\n                            <span className=\"mar-lft--5\">\n                                {item.stargazers_count}\n                            </span>\n                        </span>\n                    }\n                    {item.language &&\n                        <span className={`${styles.tag} mar-lft--5`}>{item.language}</span>\n                    }\n                </div>\n            }\n        </div>\n    );\n};\n","import React from \"react\";\nimport { RootState } from \"../../redux/reducers\";\nimport { connect } from \"react-redux\";\nimport { Card } from \"../ui/Card\";\nimport { Entities } from \"../../enums/shared\"\nimport styles from \"./UsersList.module.scss\";\n\nconst mapStateToProps = (state: RootState) => ({\n    results: state.entities.results,\n    isLoading: state.entities.isLoading,\n    isResolved: state.entities.isResolved,\n    selectedEntity: state.entities.type\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\ntype Result = User & Repository;\nconst UnconnectedUsersList: React.FC<Props> = ({\n    results,\n    isLoading,\n    isResolved,\n    selectedEntity\n}) => {\n    return (\n        <div className=\"mar-top\">\n            { !isLoading && isResolved &&\n                <div className={styles.cardsWrapper}>\n                    {results.length\n                        ? results.map((result: Result, id:number) =>\n                            <Card key={`${result.id}-${id}`} item={result} type={selectedEntity}/>\n                        )\n                        : <p className=\"mar-ver--20 mar-lft--10\">No {selectedEntity === Entities.User ? 'users' : 'repositories'} match your search</p>\n                    }\n                </div>\n            }\n            {isLoading &&\n                <div className={styles.cardsWrapper}>\n                    {Array(12)\n                        .fill(12)\n                        .map((_, index) => (\n                            <span className={styles.placeholder} key={index}></span>\n                        ))\n                    }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport const UsersList = connect(\n  mapStateToProps\n)(UnconnectedUsersList);\n","import React from \"react\";\nimport { Nav } from \"./components/main/Nav\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { UsersList } from \"./components/main/UsersList\";\nimport \"./styles/styles.scss\";\n\nconst App = () => {\n  return (\n    <div>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact component={UsersList} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport spinner from \"./octocat-spinner-128.gif\";\n\nexport const LoadingView: React.FC = () => {\n    return (\n        <div className=\"disp-flex flex-just--center flex-align--center page-height\">\n            <img src={spinner} alt=\"Github spinner\"width=\"50\" height=\"50\"/>\n        </div>\n    );\n};\n","import { Constants, Entities } from \"../../enums/shared\";\nimport { EntityActionType } from '../actions/entities';\n\nconst initialState: EntityState = { isLoading: false, isResolved: false, results: [], type: Entities.User, searchQueue: ''};\n\nfunction entitiesReducer(\n    state = initialState,\n    action: EntityActionType\n  ): EntityType {\n    switch (action.type) {\n        case Constants.SET_ENTITY_TYPE:\n            return {\n                ...state,\n                type: action.payload\n            };\n        case Constants.SET_SEARCH_QUEUE:\n            return {\n                ...state,\n                searchQueue: action.payload\n            };\n        case Constants.REQUEST_ENTITIES:\n            return {\n                ...state,\n                isLoading: true,\n                isResolved: false,\n            };\n        case Constants.SET_ENTITIES:\n            return {\n                ...state,\n                isLoading: false,\n                results: action.payload\n            };\n        case Constants.SET_ENTITIES_RESOLVED:\n            return {\n                ...state,\n                isResolved: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nexport default entitiesReducer;\n\n","import { combineReducers } from 'redux';\nimport entitiesReducer from \"../reducers/entities\";\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['entities']\n};\n\nconst rootReducer = combineReducers({\n    entities: entitiesReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport { persistStore } from \"redux-persist\";\nimport thunk from \"redux-thunk\";\nimport rootReducer, { RootState } from \"../reducers\";\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst saveToLocalStorage = (state:RootState) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (e) {\n        console.log(e)\n    }\n};\n\nconst loadFromLocalStorage = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) return undefined;\n        return JSON.parse(serializedState);\n    } catch(e) {\n        console.log(e)\n        return undefined\n    }\n\n};\n\nconst persistedState = loadFromLocalStorage();\n\nexport const store = createStore(\n    rootReducer,\n    persistedState,\n    composeEnhancers(\n        applyMiddleware(thunk),\n    )\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()));\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { LoadingView } from \"./components/ui/LoadingView\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor }  from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={<LoadingView/>} persistor={persistor}>\n            <Router>\n                <App />\n            </Router>\n        </PersistGate>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardWrapper\":\"Card_cardWrapper__3d46V\",\"cardImgWrapper\":\"Card_cardImgWrapper__1nqYg\",\"cardImg\":\"Card_cardImg__1iIhk\",\"cardName\":\"Card_cardName__1gM2O\",\"cardButton\":\"Card_cardButton__2maeQ\",\"cardInfo\":\"Card_cardInfo__1OYCB\",\"tag\":\"Card_tag__1MrJn\"};"],"sourceRoot":""}